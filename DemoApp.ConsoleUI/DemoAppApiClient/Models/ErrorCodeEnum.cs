// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace DemoApp.ConsoleUI.Models
{
    /// <summary> The ErrorCodeEnum. </summary>
    public readonly partial struct ErrorCodeEnum : IEquatable<ErrorCodeEnum>
    {
        private readonly int _value;

        /// <summary> Initializes a new instance of <see cref="ErrorCodeEnum"/>. </summary>
        public ErrorCodeEnum(int value)
        {
            _value = value;
        }

        private const int ZeroValue = 0;
        private const int OneValue = 1;
        private const int TenValue = 10;
        private const int ElevenValue = 11;
        private const int OneHundredValue = 100;
        private const int OneHundredOneValue = 101;
        private const int OneHundredTwoValue = 102;
        private const int TwoHundredOneValue = 201;
        private const int TwoHundredTwoValue = 202;
        private const int TwoHundredThreeValue = 203;
        private const int TwoHundredFourValue = 204;
        private const int _1Value = -1;

        /// <summary> 0. </summary>
        public static ErrorCodeEnum Zero { get; } = new ErrorCodeEnum(ZeroValue);
        /// <summary> 1. </summary>
        public static ErrorCodeEnum One { get; } = new ErrorCodeEnum(OneValue);
        /// <summary> 10. </summary>
        public static ErrorCodeEnum Ten { get; } = new ErrorCodeEnum(TenValue);
        /// <summary> 11. </summary>
        public static ErrorCodeEnum Eleven { get; } = new ErrorCodeEnum(ElevenValue);
        /// <summary> 100. </summary>
        public static ErrorCodeEnum OneHundred { get; } = new ErrorCodeEnum(OneHundredValue);
        /// <summary> 101. </summary>
        public static ErrorCodeEnum OneHundredOne { get; } = new ErrorCodeEnum(OneHundredOneValue);
        /// <summary> 102. </summary>
        public static ErrorCodeEnum OneHundredTwo { get; } = new ErrorCodeEnum(OneHundredTwoValue);
        /// <summary> 201. </summary>
        public static ErrorCodeEnum TwoHundredOne { get; } = new ErrorCodeEnum(TwoHundredOneValue);
        /// <summary> 202. </summary>
        public static ErrorCodeEnum TwoHundredTwo { get; } = new ErrorCodeEnum(TwoHundredTwoValue);
        /// <summary> 203. </summary>
        public static ErrorCodeEnum TwoHundredThree { get; } = new ErrorCodeEnum(TwoHundredThreeValue);
        /// <summary> 204. </summary>
        public static ErrorCodeEnum TwoHundredFour { get; } = new ErrorCodeEnum(TwoHundredFourValue);
        /// <summary> -1. </summary>
        public static ErrorCodeEnum _1 { get; } = new ErrorCodeEnum(_1Value);

        internal int ToSerialInt32() => _value;

        /// <summary> Determines if two <see cref="ErrorCodeEnum"/> values are the same. </summary>
        public static bool operator ==(ErrorCodeEnum left, ErrorCodeEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ErrorCodeEnum"/> values are not the same. </summary>
        public static bool operator !=(ErrorCodeEnum left, ErrorCodeEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ErrorCodeEnum"/>. </summary>
        public static implicit operator ErrorCodeEnum(int value) => new ErrorCodeEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ErrorCodeEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ErrorCodeEnum other) => Equals(_value, other._value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        /// <inheritdoc />
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
